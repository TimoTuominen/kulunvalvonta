@page "/search"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Kulunvalvonta.Shared
@rendermode InteractiveWebAssembly
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Traffic Data Search</PageTitle>

@if (DataProvider is null || Locations is null)
{
    <p><em>Loading…</em></p>
}
else
{
    <div class="container mb-4">
        <h3 class="title">Hae liikennetapahtumia</h3>
        <EditForm Model="Criteria"
                  OnValidSubmit="OnValidSubmit"
                  FormName="searchForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row g-3">
                <div class="col-md-2">
                    <label class="form-label">Rekisterinumero</label>
                    <input class="form-control" @bind="Criteria.RegNumber" />
                </div>

                <div class="col-md-5">
                    <label class="form-label">Yritys</label>
                    <input class="form-control" @bind="Criteria.Company" />
                </div>

                <div class="col-md-5">
                    <label class="form-label">Kuljettaja</label>
                    <input class="form-control" @bind="Criteria.DriverName" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Aloitus päivä</label>
                    <input type="date" class="form-control" @bind="Criteria.StartDate" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">Klo</label>
                    <input type="time" class="form-control" @bind="Criteria.StartTime" />
                </div>

                <div class="col-md-3">
                    <label class="form-label">Päättyy</label>
                    <input type="date" class="form-control" @bind="Criteria.EndDate" />
                </div>

                <div class="col-md-2">
                    <label class="form-label">Klo</label>
                    <input type="time" class="form-control" @bind="Criteria.EndTime" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Paikkakunta</label>
                    <select class="form-select" @bind="Criteria.LocationId">
                        <option value="0">-- Valitse --</option>
                        @foreach (var loc in Locations)
                        {
                            <option value="@loc.LocationId">@loc.LocationName</option>
                        }
                    </select>
                </div>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary">Hae</button>
            </div>
        </EditForm>
    </div>

    <div class="container">
        <h3 class="title">Tulokset</h3>

        @if (_hasSearched)
        {
            <a class="btn btn-success mb-3" href="@GetDownloadUrl()" download>
                Lataa Excel
            </a>
        }

        <QuickGrid @ref="gridRef"
                   ItemsProvider="DataProvider">
            <PropertyColumn Property="p => p.RegNumber" Title="Rekisterinumero" />
            <PropertyColumn Property="p => p.DriverName" Title="Kuljettaja" />
            <PropertyColumn Property="p => p.Company" Title="Yritys" />
            <PropertyColumn Property="p => p.Date" Title="Päivämäärä" />
            <PropertyColumn Property="p => p.EntryTime" Title="Sisään" />
            <PropertyColumn Property="p => p.ExitTime" Title="Ulos" />
            <PropertyColumn Property="p => p.Reason" Title="Syy" />
            <PropertyColumn Property="p => p.ExpandedReason" Title="Lisätiedot" />
            <PropertyColumn Property="p => p.LocationName" Title="Paikkakunta" />
        </QuickGrid>
    </div>
}

@code {
    private class SearchCriteria
    {
        public string? RegNumber { get; set; }
        public string? Company { get; set; }
        public string? DriverName { get; set; }
        public DateOnly? StartDate { get; set; }
        public TimeOnly? StartTime { get; set; }
        public DateOnly? EndDate { get; set; }
        public TimeOnly? EndTime { get; set; }
        public int LocationId { get; set; }
    }

    private SearchCriteria Criteria = new();
    private QuickGrid<TrafficdataDto>? gridRef;
    private GridItemsProvider<TrafficdataDto>? DataProvider;
    private List<LocationDto>? Locations;
    private bool _hasSearched;

    protected override async Task OnInitializedAsync()
    {
        Locations = await Http.GetFromJsonAsync<List<LocationDto>>("/locations");

        DataProvider = new GridItemsProvider<TrafficdataDto>(async request =>
        {
            if (!_hasSearched)
                return new GridItemsProviderResult<TrafficdataDto>
                    {
                        Items = [],
                        TotalItemCount = 0
                    };

            var qs = new Dictionary<string, object?>();

            if (!string.IsNullOrWhiteSpace(Criteria.RegNumber))
                qs["regNumber"] = Criteria.RegNumber;
            if (!string.IsNullOrWhiteSpace(Criteria.Company))
                qs["company"] = Criteria.Company;
            if (!string.IsNullOrWhiteSpace(Criteria.DriverName))
                qs["driverName"] = Criteria.DriverName;

            if (Criteria.StartDate.HasValue)
            {
                var dt = Criteria.StartDate.Value
                    .ToDateTime(Criteria.StartTime ?? TimeOnly.MinValue);
                qs["start"] = dt.ToString("o");
            }

            if (Criteria.EndDate.HasValue)
            {
                var dt = Criteria.EndDate.Value
                    .ToDateTime(Criteria.EndTime ?? TimeOnly.MaxValue);
                qs["end"] = dt.ToString("o");
            }

            if (Criteria.LocationId != 0)
                qs["locationId"] = Criteria.LocationId;

            qs["skip"] = request.StartIndex;
            qs["take"] = request.Count ?? 50;

            var uri = NavManager.GetUriWithQueryParameters("/trafficdata/search", qs);
            var result = await Http.GetFromJsonAsync<SearchResult>(uri);

            return new GridItemsProviderResult<TrafficdataDto>
                {
                    Items = result?.Items ?? [],
                    TotalItemCount = result?.TotalCount ?? 0
                };
        });
    }

    private async Task OnValidSubmit()
    {
        _hasSearched = true;
        if (gridRef is not null)
            await gridRef.RefreshDataAsync();
    }

    private string GetDownloadUrl()
    {
        var qs = new Dictionary<string, object?>();

        if (!string.IsNullOrWhiteSpace(Criteria.RegNumber))
            qs["regNumber"] = Criteria.RegNumber;
        if (!string.IsNullOrWhiteSpace(Criteria.Company))
            qs["company"] = Criteria.Company;
        if (!string.IsNullOrWhiteSpace(Criteria.DriverName))
            qs["driverName"] = Criteria.DriverName;

        if (Criteria.StartDate.HasValue)
        {
            var dt = Criteria.StartDate.Value
                .ToDateTime(Criteria.StartTime ?? TimeOnly.MinValue);
            qs["start"] = dt.ToString("o");
        }

        if (Criteria.EndDate.HasValue)
        {
            var dt = Criteria.EndDate.Value
                .ToDateTime(Criteria.EndTime ?? TimeOnly.MaxValue);
            qs["end"] = dt.ToString("o");
        }

        if (Criteria.LocationId != 0)
            qs["locationId"] = Criteria.LocationId;

        return NavManager.GetUriWithQueryParameters("/api/export/excel", qs);
    }

    private record SearchResult(List<TrafficdataDto> Items, int TotalCount);
}

