@page "/search"
@using Microsoft.AspNetCore.Components.QuickGrid;
@using Kulunvalvonta.Shared;
@rendermode InteractiveAuto
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Traffic Data</PageTitle>

@if (DataProvider == null || Locations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="col-lg-8 col-md-10 col-sm-12">
            <h3 class="title">Lisää uusi tapahtuma</h3>
            <EditForm Model="@ProvidedData" OnValidSubmit="@OnValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <label for="RegNumber">Rekisterinumero:</label>
                            <InputText Id="RegNumber" @bind-Value="ProvidedData.RegNumber" class="form-control" />
                        </div>
                    </div>
                    <div class="col-md-5">
                        <div class="form-group">
                            <label for="Company">Yritys:</label>
                            <InputText Id="Company" @bind-Value="ProvidedData.Company" class="form-control" />
                        </div>
                    </div>

                    <div class="col-md-5">
                        <div class="form-group">
                            <label for="DriverName">Nimi:</label>
                            <InputText Id="DriverName" @bind-Value="ProvidedData.DriverName" class="form-control" />
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3">
                        <div class="form-group">
                            <label for="Date">Aloitus päivä:</label>
                            <InputDate Id="Date" @bind-Value="ProvidedData.Date" class="form-control" />
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">

                            <label for="time">Klo:</label>
                            <input type="time" id="time" @bind="ProvidedData.EntryTime" class="form-control" />
                        </div>
                    </div>
               
                    <div class="col-md-3">
                        <div class="form-group">
                            <label for="Date">Päättyy:</label>
                            <InputDate Id="EndDate" @bind-Value="ProvidedData.SearchEndDate" class="form-control" />
                        </div>
                    </div>

                    <div class="col-md-2">
                        <div class="form-group">

                            <label for="time">Klo:</label>
                            <input type="time" id="time" @bind="ProvidedData.SearchEndTime" class="form-control" />
                        </div>
                    </div>
                    <div class="row">

                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="LocationId">Paikkakunta:</label>
                                <InputSelect Id="LocationId" @bind-Value="ProvidedData.LocationId" class="form-control">
                                    <option value="0">-- Valitse paikkakunta --</option>
                                    @foreach (var location in Locations)
                                    {
                                        <option value="@location.LocationId">@location.LocationName</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                    </div>
                </div>
                <br />
                <button type="submit" class="btn btn-primary">Hae</button>
            </EditForm>
        </div>
    </div>

    <br />

    <div class="container">
        <div class="col-lg-4 col-md-5 col-sm-6">
            <h3 class="title">Tulokset</h3>
            <div class="grid text-nowrap">
                <QuickGrid @ref="gridRef" ItemsProvider="SearchProvider">
                    <PropertyColumn Property="p => p.RegNumber" Title="Rekisterinumero"></PropertyColumn>
                    <PropertyColumn Property="p => p.DriverName" Title="Kuljettaja"></PropertyColumn>
                    <PropertyColumn Property="p => p.Company" Title="Yritys"></PropertyColumn>
                    <PropertyColumn Property="p => p.Date" Title="Päivämäärä"></PropertyColumn>
                    <PropertyColumn Property="p => p.EntryTime" Title="Sisään"></PropertyColumn>
                    <PropertyColumn Property="p => p.ExitTime" Title="Ulos"></PropertyColumn>
                    <PropertyColumn Property="p => p.Reason" Title="Syy"></PropertyColumn>
                    <PropertyColumn Property="p => p.ExpandedReason" Title="Lisätiedot"></PropertyColumn>
                    <PropertyColumn Property="p => p.LocationName" Title="Paikkakunta"></PropertyColumn>
                </QuickGrid>
            </div>
        </div>
    </div>



}

@code {
    GridItemsProvider<TrafficdataDto>? DataProvider;
    private TrafficdataDto ProvidedData = new();
    private List<LocationDto>? Locations = new();
    //private List<TrafficdataDto>? trafficData;
    private QuickGrid<TrafficdataDto>? gridRef;



    protected override async Task OnInitializedAsync()
    {
        DataProvider = async (request) =>
        {
            var allData = await Http.GetFromJsonAsync<List<TrafficdataDto>>("/trafficdata")
                           ?? new List<TrafficdataDto>();

            var items = allData
                .Skip(request.StartIndex)
                .Take(request.Count ?? allData.Count)
                .ToList();

            return new GridItemsProviderResult<TrafficdataDto>
                {
                    Items = items,
                    TotalItemCount = allData.Count
                };
        };
        Locations = await Http.GetFromJsonAsync<List<LocationDto>>("/locations");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SetCurrentDateTime();

            StateHasChanged();
        }
    }

    private async Task OnValidSubmit()
    {


    }

    private void Departed(TrafficdataDto TrafficEntry)
    {
        //NavManager.NavigateTo();
    }

    private void DeleteEntry(TrafficdataDto TrafficEntry)
    {
        //NavManager.NavigateTo();
    }

    private void SetCurrentDateTime()
    {
        var now = DateTime.Now;
        ProvidedData.Date = DateOnly.FromDateTime(now);
        ProvidedData.EntryTime = TimeOnly.FromDateTime(now);
        ProvidedData.SearchEndDate = DateOnly.FromDateTime(now);
        ProvidedData.SearchEndTime = TimeOnly.FromDateTime(now);
    }

}